/*
Edge Application

Testing EdgeApplicationsCacheSettingsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package edgeapplications

import (
	"context"
	"testing"

	openapiclient "github.com/aziontech/azionapi-go-sdk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_edgeapplications_EdgeApplicationsCacheSettingsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test EdgeApplicationsCacheSettingsApiService EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var edgeApplicationId int64
		var cacheSettings int64

		httpRes, err := apiClient.EdgeApplicationsCacheSettingsApi.EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsDelete(context.Background(), edgeApplicationId, cacheSettings).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EdgeApplicationsCacheSettingsApiService EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var edgeApplicationId int64
		var cacheSettingsId int64

		resp, httpRes, err := apiClient.EdgeApplicationsCacheSettingsApi.EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGet(context.Background(), edgeApplicationId, cacheSettingsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EdgeApplicationsCacheSettingsApiService EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPut", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var edgeApplicationId int64
		var cacheSettingsId int64

		resp, httpRes, err := apiClient.EdgeApplicationsCacheSettingsApi.EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPut(context.Background(), edgeApplicationId, cacheSettingsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EdgeApplicationsCacheSettingsApiService EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsPatch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var edgeApplicationId int64
		var cacheSettings int64

		resp, httpRes, err := apiClient.EdgeApplicationsCacheSettingsApi.EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsPatch(context.Background(), edgeApplicationId, cacheSettings).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EdgeApplicationsCacheSettingsApiService EdgeApplicationsEdgeApplicationIdCacheSettingsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var edgeApplicationId int64

		resp, httpRes, err := apiClient.EdgeApplicationsCacheSettingsApi.EdgeApplicationsEdgeApplicationIdCacheSettingsGet(context.Background(), edgeApplicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EdgeApplicationsCacheSettingsApiService EdgeApplicationsEdgeApplicationIdCacheSettingsPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var edgeApplicationId int64

		resp, httpRes, err := apiClient.EdgeApplicationsCacheSettingsApi.EdgeApplicationsEdgeApplicationIdCacheSettingsPost(context.Background(), edgeApplicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
