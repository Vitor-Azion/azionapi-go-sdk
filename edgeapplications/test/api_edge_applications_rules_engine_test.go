/*
Edge Application

Testing EdgeApplicationsRulesEngineApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package edgeapplications

import (
	"context"
	openapiclient "github.com/aziontech/azionapi-go-sdk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_edgeapplications_EdgeApplicationsRulesEngineApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test EdgeApplicationsRulesEngineApiService EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var edgeApplicationId int64
		var phase string

		resp, httpRes, err := apiClient.EdgeApplicationsRulesEngineApi.EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGet(context.Background(), edgeApplicationId, phase).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EdgeApplicationsRulesEngineApiService EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var edgeApplicationId int64
		var phase string

		resp, httpRes, err := apiClient.EdgeApplicationsRulesEngineApi.EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPost(context.Background(), edgeApplicationId, phase).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EdgeApplicationsRulesEngineApiService EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var edgeApplicationId int64
		var phase string
		var ruleId int64

		httpRes, err := apiClient.EdgeApplicationsRulesEngineApi.EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDelete(context.Background(), edgeApplicationId, phase, ruleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EdgeApplicationsRulesEngineApiService EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var edgeApplicationId int64
		var phase string
		var ruleId int64

		resp, httpRes, err := apiClient.EdgeApplicationsRulesEngineApi.EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatch(context.Background(), edgeApplicationId, phase, ruleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EdgeApplicationsRulesEngineApiService EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPut", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var edgeApplicationId int64
		var phase string
		var ruleId int64

		resp, httpRes, err := apiClient.EdgeApplicationsRulesEngineApi.EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPut(context.Background(), edgeApplicationId, phase, ruleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
