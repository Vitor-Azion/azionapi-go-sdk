/*
Intelligent DNS

Azion Intelligent DNS API

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package idns

import (
	"encoding/json"
)

// CreateRecord Object returned by create zone record
type CreateRecord struct {
	Results *Record `json:"results,omitempty"`
	// The schema version
	SchemaVersion *int32 `json:"schema_version,omitempty"`
}

// NewCreateRecord instantiates a new CreateRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateRecord() *CreateRecord {
	this := CreateRecord{}
	return &this
}

// NewCreateRecordWithDefaults instantiates a new CreateRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateRecordWithDefaults() *CreateRecord {
	this := CreateRecord{}
	return &this
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *CreateRecord) GetResults() Record {
	if o == nil || isNil(o.Results) {
		var ret Record
		return ret
	}
	return *o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRecord) GetResultsOk() (*Record, bool) {
	if o == nil || isNil(o.Results) {
    return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *CreateRecord) HasResults() bool {
	if o != nil && !isNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given Record and assigns it to the Results field.
func (o *CreateRecord) SetResults(v Record) {
	o.Results = &v
}

// GetSchemaVersion returns the SchemaVersion field value if set, zero value otherwise.
func (o *CreateRecord) GetSchemaVersion() int32 {
	if o == nil || isNil(o.SchemaVersion) {
		var ret int32
		return ret
	}
	return *o.SchemaVersion
}

// GetSchemaVersionOk returns a tuple with the SchemaVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRecord) GetSchemaVersionOk() (*int32, bool) {
	if o == nil || isNil(o.SchemaVersion) {
    return nil, false
	}
	return o.SchemaVersion, true
}

// HasSchemaVersion returns a boolean if a field has been set.
func (o *CreateRecord) HasSchemaVersion() bool {
	if o != nil && !isNil(o.SchemaVersion) {
		return true
	}

	return false
}

// SetSchemaVersion gets a reference to the given int32 and assigns it to the SchemaVersion field.
func (o *CreateRecord) SetSchemaVersion(v int32) {
	o.SchemaVersion = &v
}

func (o CreateRecord) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Results) {
		toSerialize["results"] = o.Results
	}
	if !isNil(o.SchemaVersion) {
		toSerialize["schema_version"] = o.SchemaVersion
	}
	return json.Marshal(toSerialize)
}

type NullableCreateRecord struct {
	value *CreateRecord
	isSet bool
}

func (v NullableCreateRecord) Get() *CreateRecord {
	return v.value
}

func (v *NullableCreateRecord) Set(val *CreateRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateRecord(val *CreateRecord) *NullableCreateRecord {
	return &NullableCreateRecord{value: val, isSet: true}
}

func (v NullableCreateRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


