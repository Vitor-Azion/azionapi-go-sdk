/*
Intelligent DNS

Azion Intelligent DNS API

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package idns

import (
	"encoding/json"
)

// RecordsCollection struct for RecordsCollection
type RecordsCollection struct {
	// The schema version
	SchemaVersion *int32 `json:"schema_version,omitempty"`
	// Number of records
	Count *int32 `json:"count,omitempty"`
	// The total pages
	TotalPages *int32 `json:"total_pages,omitempty"`
	Links *ZonesCollectionLinks `json:"links,omitempty"`
	Results *RecordsCollectionResults `json:"results,omitempty"`
}

// NewRecordsCollection instantiates a new RecordsCollection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordsCollection() *RecordsCollection {
	this := RecordsCollection{}
	return &this
}

// NewRecordsCollectionWithDefaults instantiates a new RecordsCollection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordsCollectionWithDefaults() *RecordsCollection {
	this := RecordsCollection{}
	return &this
}

// GetSchemaVersion returns the SchemaVersion field value if set, zero value otherwise.
func (o *RecordsCollection) GetSchemaVersion() int32 {
	if o == nil || isNil(o.SchemaVersion) {
		var ret int32
		return ret
	}
	return *o.SchemaVersion
}

// GetSchemaVersionOk returns a tuple with the SchemaVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordsCollection) GetSchemaVersionOk() (*int32, bool) {
	if o == nil || isNil(o.SchemaVersion) {
    return nil, false
	}
	return o.SchemaVersion, true
}

// HasSchemaVersion returns a boolean if a field has been set.
func (o *RecordsCollection) HasSchemaVersion() bool {
	if o != nil && !isNil(o.SchemaVersion) {
		return true
	}

	return false
}

// SetSchemaVersion gets a reference to the given int32 and assigns it to the SchemaVersion field.
func (o *RecordsCollection) SetSchemaVersion(v int32) {
	o.SchemaVersion = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *RecordsCollection) GetCount() int32 {
	if o == nil || isNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordsCollection) GetCountOk() (*int32, bool) {
	if o == nil || isNil(o.Count) {
    return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *RecordsCollection) HasCount() bool {
	if o != nil && !isNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *RecordsCollection) SetCount(v int32) {
	o.Count = &v
}

// GetTotalPages returns the TotalPages field value if set, zero value otherwise.
func (o *RecordsCollection) GetTotalPages() int32 {
	if o == nil || isNil(o.TotalPages) {
		var ret int32
		return ret
	}
	return *o.TotalPages
}

// GetTotalPagesOk returns a tuple with the TotalPages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordsCollection) GetTotalPagesOk() (*int32, bool) {
	if o == nil || isNil(o.TotalPages) {
    return nil, false
	}
	return o.TotalPages, true
}

// HasTotalPages returns a boolean if a field has been set.
func (o *RecordsCollection) HasTotalPages() bool {
	if o != nil && !isNil(o.TotalPages) {
		return true
	}

	return false
}

// SetTotalPages gets a reference to the given int32 and assigns it to the TotalPages field.
func (o *RecordsCollection) SetTotalPages(v int32) {
	o.TotalPages = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *RecordsCollection) GetLinks() ZonesCollectionLinks {
	if o == nil || isNil(o.Links) {
		var ret ZonesCollectionLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordsCollection) GetLinksOk() (*ZonesCollectionLinks, bool) {
	if o == nil || isNil(o.Links) {
    return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *RecordsCollection) HasLinks() bool {
	if o != nil && !isNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given ZonesCollectionLinks and assigns it to the Links field.
func (o *RecordsCollection) SetLinks(v ZonesCollectionLinks) {
	o.Links = &v
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *RecordsCollection) GetResults() RecordsCollectionResults {
	if o == nil || isNil(o.Results) {
		var ret RecordsCollectionResults
		return ret
	}
	return *o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordsCollection) GetResultsOk() (*RecordsCollectionResults, bool) {
	if o == nil || isNil(o.Results) {
    return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *RecordsCollection) HasResults() bool {
	if o != nil && !isNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given RecordsCollectionResults and assigns it to the Results field.
func (o *RecordsCollection) SetResults(v RecordsCollectionResults) {
	o.Results = &v
}

func (o RecordsCollection) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.SchemaVersion) {
		toSerialize["schema_version"] = o.SchemaVersion
	}
	if !isNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !isNil(o.TotalPages) {
		toSerialize["total_pages"] = o.TotalPages
	}
	if !isNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !isNil(o.Results) {
		toSerialize["results"] = o.Results
	}
	return json.Marshal(toSerialize)
}

type NullableRecordsCollection struct {
	value *RecordsCollection
	isSet bool
}

func (v NullableRecordsCollection) Get() *RecordsCollection {
	return v.value
}

func (v *NullableRecordsCollection) Set(val *RecordsCollection) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordsCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordsCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordsCollection(val *RecordsCollection) *NullableRecordsCollection {
	return &NullableRecordsCollection{value: val, isSet: true}
}

func (v NullableRecordsCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordsCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


