/*
Intelligent DNS

Azion Intelligent DNS API

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package idns

import (
	"encoding/json"
)

// RecordsCollectionResults struct for RecordsCollectionResults
type RecordsCollectionResults struct {
	ZoneId *int32 `json:"zone_id,omitempty"`
	Domain *string `json:"domain,omitempty"`
	// Zone records collection
	Records []Record `json:"records,omitempty"`
}

// NewRecordsCollectionResults instantiates a new RecordsCollectionResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordsCollectionResults() *RecordsCollectionResults {
	this := RecordsCollectionResults{}
	return &this
}

// NewRecordsCollectionResultsWithDefaults instantiates a new RecordsCollectionResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordsCollectionResultsWithDefaults() *RecordsCollectionResults {
	this := RecordsCollectionResults{}
	return &this
}

// GetZoneId returns the ZoneId field value if set, zero value otherwise.
func (o *RecordsCollectionResults) GetZoneId() int32 {
	if o == nil || isNil(o.ZoneId) {
		var ret int32
		return ret
	}
	return *o.ZoneId
}

// GetZoneIdOk returns a tuple with the ZoneId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordsCollectionResults) GetZoneIdOk() (*int32, bool) {
	if o == nil || isNil(o.ZoneId) {
    return nil, false
	}
	return o.ZoneId, true
}

// HasZoneId returns a boolean if a field has been set.
func (o *RecordsCollectionResults) HasZoneId() bool {
	if o != nil && !isNil(o.ZoneId) {
		return true
	}

	return false
}

// SetZoneId gets a reference to the given int32 and assigns it to the ZoneId field.
func (o *RecordsCollectionResults) SetZoneId(v int32) {
	o.ZoneId = &v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *RecordsCollectionResults) GetDomain() string {
	if o == nil || isNil(o.Domain) {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordsCollectionResults) GetDomainOk() (*string, bool) {
	if o == nil || isNil(o.Domain) {
    return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *RecordsCollectionResults) HasDomain() bool {
	if o != nil && !isNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *RecordsCollectionResults) SetDomain(v string) {
	o.Domain = &v
}

// GetRecords returns the Records field value if set, zero value otherwise.
func (o *RecordsCollectionResults) GetRecords() []Record {
	if o == nil || isNil(o.Records) {
		var ret []Record
		return ret
	}
	return o.Records
}

// GetRecordsOk returns a tuple with the Records field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordsCollectionResults) GetRecordsOk() ([]Record, bool) {
	if o == nil || isNil(o.Records) {
    return nil, false
	}
	return o.Records, true
}

// HasRecords returns a boolean if a field has been set.
func (o *RecordsCollectionResults) HasRecords() bool {
	if o != nil && !isNil(o.Records) {
		return true
	}

	return false
}

// SetRecords gets a reference to the given []Record and assigns it to the Records field.
func (o *RecordsCollectionResults) SetRecords(v []Record) {
	o.Records = v
}

func (o RecordsCollectionResults) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ZoneId) {
		toSerialize["zone_id"] = o.ZoneId
	}
	if !isNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	if !isNil(o.Records) {
		toSerialize["records"] = o.Records
	}
	return json.Marshal(toSerialize)
}

type NullableRecordsCollectionResults struct {
	value *RecordsCollectionResults
	isSet bool
}

func (v NullableRecordsCollectionResults) Get() *RecordsCollectionResults {
	return v.value
}

func (v *NullableRecordsCollectionResults) Set(val *RecordsCollectionResults) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordsCollectionResults) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordsCollectionResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordsCollectionResults(val *RecordsCollectionResults) *NullableRecordsCollectionResults {
	return &NullableRecordsCollectionResults{value: val, isSet: true}
}

func (v NullableRecordsCollectionResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordsCollectionResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


