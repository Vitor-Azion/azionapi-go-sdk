openapi: 3.0.0
info:
  description: "## Welcome to the Azion API!\n\nWith the following APIs you can check,\
    \ remove or update existing settings, besides creating new ones.\n\n* * *\n\n\
    ## Overview\n\nThe Azion API is a RESTful API, based on HTTPS requests, that allows\
    \ you to integrate your systems with our platform, simply, quickly, and securely.\n\
    \nHere you will find instructions on how our API works and what functionality\
    \ is available.\n\nThis documentation is being constantly updated. Make sure you\
    \ verify if there are any updates or changes before you perform any development\
    \ in your application, even if you are familiar with our API.\n\n* * *\n\nBoth\
    \ HTTPS requests and responses must be in JavaScript Object Notation (JSON) format.\
    \ All HTTPS requests and responses must follow these conventions.\n\n**Base URL**\n\
    \nThe base URL of the API, which must be used, is:\n\n[**https://api.azionapi.net/**](https://api.azionapi.net/)\n\
    \n**HTTP Methods**\n\nEach HTTP method defines the type of operation that will\
    \ be run.\n\n| HTTP Method | CRUD | Whole Collection (e.g. /items) | Specific\
    \ Item (e.g. /items/:item_id) |\n| --- | --- | --- | --- |\n| GET | Read | It\
    \ retrieves the list of items in a Collection. | It retrieves a specific item\
    \ in a Collection. |\n| POST | Create | It creates a new item in the Collection.\
    \ | \\- |\n| PUT | Update/Replace | It replaces a whole Collection with a new\
    \ one. | It replaces an item in a Collection with a new one. |\n| PATCH | Update/Modify\
    \ | It partially updates a Collection. | It partially updates an item in a Collection\
    \ |\n| DELETE | Delete | It deletes a whole Collection. | It deletes an item in\
    \ a Collection. |\n\n* * *\n\n**Status Codes**\n\nThe HTTP return code defines\
    \ the status – successful or not – after the requested operation is run.\n\n|\
    \ Status Code | Meaning |\n| --- | --- |\n| 200 OK | General Status for a successful\
    \ operation. |\n| 201 CREATED | Successfully created a collection or item, by\
    \ means of POST or PUT. |\n| 204 NO CONTENT | Successful operation, but without\
    \ any content to be return to the Body. Generally used for DELETE or PUT operations.\
    \ |\n| 207 MULTI-STATUS | A batch of operations were triggered by a single request,\
    \ which resulted in different return codes when it was run, for some of the operations.\
    \ The codes are displayed in the “status” field, in the body of the response,\
    \ for each sub-batch of operations for whichever are applicable. |\n| 400 BAD\
    \ REQUEST | Request error, such as invalid parameters, missing mandatory parameters\
    \ or others. |\n| 401 UNAUTHORIZED | Error caused by a missing HTTP Authentication\
    \ header. |\n| 403 FORBIDDEN | User does not have the permissions to run the requested\
    \ operation. |\n| 404 NOT FOUND | The requested resource does not exist. |\n|\
    \ 405 METHOD NOT ALLOWED | The requested method is not applicable with the URL.\
    \ |\n| 406 NOT ACCEPTABLE | Accept header missing from the HTTP request or the\
    \ header contains formatting or the version is not supported by the API. |\n|\
    \ 409 CONFLICT | Conflict generated in running the request, such as a request\
    \ to create an already existing record. |\n| 429 TOO MANY REQUESTS | The request\
    \ was temporarily rejected, due to exceeding the limit on operations. Wait for\
    \ the time defined in the X-Ratelimit-Reset header and try again. |\n| 500 INTERNAL\
    \ SERVER ERROR | Unintentional error, due to an unidentified failure in the request\
    \ process. |\n| \\--- |  |\n| **HTTP Headers** |  |\n\nAll requests must be generated\
    \ with the HTTP header specifying the desired code format for responses and the\
    \ API version used. The current version of the API is 3 and the format is application/json.\n\
    \n```\nAccept: application/json; version=3\n\n```\n\n* * *\n\n**Rate Limit**\n\
    \nThe limit of operations that can be run via the API is defined by 3 HTTP response\
    \ headers:\n\n*   **X-ratelimit-limit:** number of operations allowed in one time-frame;\n\
    *   **X-ratelimit-remaining:** number of operations still available in one time-frame;\n\
    *   **X-ratelimit-reset:** is the date and time, in IOS 8601 format, which represents\
    \ the point in the future when the time-frame will be closed and when the limits\
    \ will, therefore, be reset.\n    \n\nExample of HTTP response headers and a request:\n\
    \n```\nDate: Thu, 02 Nov 2017 12:30:28 GMT\nX-ratelimit-remaining: 199\nX-ratelimit-limit:\
    \ 200\nX-ratelimit-reset: 2017-11-02T12:31:28.675446\n\n```\n\nIn the example\
    \ provided, 200 operations are allowed within a 1-minute time frame. Of those,\
    \ there are 199 still available, because one has already been run. The total limit\
    \ will be reset after 1 minute.\n\nWhen the X-ratelimit-limit is reached, or in\
    \ other words, when the X-ratelimit-remaining reaches zero, the API will give\
    \ the error, HTTP 429 TOO MANY REQUESTS. If your application receives this error,\
    \ you will need to wait until the time defined in X-ratelimit-reset has passed,\
    \ to make another request.\n\n*   **X-ratelimit-limit by product**\n    \n\nThe\
    \ *X-ratelimit limit* variations by product are the following:\n\n*   **Real-Time\
    \ Metrics:** 20 requests per minute.\n*   **Real-Time Purge:** 200 requests per\
    \ minute; except for the Wildcard, which is 2000 a day.\n    \n\n> The rate-limit\
    \ values are based on the client_id.\n\n* * *\n\n**Optional Parameters**\n\nIn\
    \ this version, it is possible to include some optional parameters as part of\
    \ the GET method, which can help and modify the form in which your data will be\
    \ returned.\n\nYou can combine these parameters to get the result you want.\n\n\
    They are:\n\n| Parameter | Description | Accepted values: |\n| --- | --- | ---\
    \ |\n| order_by | Identifies which field the return should be sorted by. The default\
    \ ordering is ascending. | Depends on the fields available from the endpoint structure\
    \ |\n| sort | Defines which ordering to be used: ascending or descending. | asc\
    \  <br>  <br>desc |\n| page | Identifies which page should be returned, if the\
    \ return is paginated. The default value is 1. | Page number. |\n| page_size |\
    \ Identifies how many items should be returned per page. The default value is\
    \ 10. | Desired number of items. |\n\n* * *\n\n**Request Exemple**\n\nYou can\
    \ use one parameter, or a combination. See the example below, which uses all of\
    \ them in the same request.\n\n```\nGET /domains?order_by=name&page_size=20&sort=desc&page=3\n\
    Accept: application/json; version=3\nAuthorization: token 2909f3932069047f4736dc87e72baaddd19c9f75\n\
    \n```\n\n* * *\n\n# Authentication\n\nAuthentication and authorization of operations\
    \ via Azion API is done through Tokens.\n\nThe first step is to create the Token\
    \ through authenticating a user registered in [Real-Time Manager](https://sso.azion.com/login).\n\
    \n* * *\n\n## Encoding Username and Password in Base64\n\nOnly token creation\
    \ and cancelling operations are performed through Basic Authentication, that is,\
    \ with a username and password. You can create and cancel the token through the\
    \ API itself, but for that you need to encode your username and password in base64.\n\
    \nBase64 encoding can be done from the command line on a Unix terminal:\n\n```\n\
    $ echo 'user@domain:password'|base64\ndXNlckBkb21haW46cGFzc3dvcmQK\n\n```\n\n\
    If you do not have a Unix terminal available, you can use the free online service\
    \ at [https://www.base64encode.org/](https://www.base64encode.org/)"
  title: Purge
  version: 1.0.0
servers:
- url: https://api.azionapi.net
tags:
- description: "If you need to delete an object from the Edge Caching or L2 Caching\
    \ layers before time-out, you can use the Real-Time Purge API. \nIf desired, integrate\
    \ the Azion API with your CMS to automate any content update process."
  name: Real-Time Purge
paths:
  /purge/url:
    post:
      description: |-
        List of URLs you want to remove from the Azion Edge Servers cache.

        urls (array): list of up to 50 URLs to be expired from the cache, per request.

        method (choice): purge method, use the “delete” value for removal.
      operationId: purgeUrl
      parameters:
      - example: application/json; version=3
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          type: string
        style: simple
      - example: Token [TOKEN VALUE]
        explode: false
        in: header
        name: Authorization
        required: false
        schema:
          type: string
        style: simple
      - example: application/json
        explode: false
        in: header
        name: Content-Type
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json; version=3:
            schema:
              $ref: '#/components/schemas/PurgeUrlRequest'
      responses:
        "200":
          content:
            application/json; version=3: {}
          description: Successful response
        "201":
          content:
            application/json; version=3: {}
          description: Created
        "204":
          content:
            application/json; version=3: {}
          description: No Content
        "207":
          content:
            application/json; version=3: {}
          description: Multi Status
        "400":
          content:
            application/json; version=3: {}
          description: Bad Request
        "401":
          content:
            application/json; version=3: {}
          description: Unauthorized
        "403":
          content:
            application/json; version=3: {}
          description: Forbidden
        "404":
          content:
            application/json; version=3: {}
          description: Not Found
        "405":
          content:
            application/json; version=3: {}
          description: Method Not Allowed
        "406":
          content:
            application/json; version=3: {}
          description: Not Acceptable
        "409":
          content:
            application/json; version=3: {}
          description: Conflict
        "429":
          content:
            application/json; version=3: {}
          description: Too Many Requests
        "500":
          content:
            application/json; version=3: {}
          description: Internal Server Error
      security:
      - JWT: []
      summary: /purge/url
      tags:
      - Real-Time Purge
  /purge/cachekey:
    post:
      description: |-
        List of Cache Keys you want to remove from the Azion Edge Servers cache.

        urls (array): list of up to 50 Cache Keys to be expired from the cache, per request.

        method (choice): purge method, use the “delete” value for removal.

        Layer (choice): layer where the purge will be done. Use the value “edge_caching” (default value if not informed) to purge on the Edge Caching layer and the value “l2_caching” to purge on L2 Caching.
      operationId: purgeCacheKey
      parameters:
      - example: application/json; version=3
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          type: string
        style: simple
      - example: Token [TOKEN VALUE]
        explode: false
        in: header
        name: Authorization
        required: false
        schema:
          type: string
        style: simple
      - example: application/json
        explode: false
        in: header
        name: Content-Type
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurgeCacheKeyRequest'
      responses:
        "200":
          content:
            application/json: {}
          description: Successful response
        "201":
          content:
            application/json; version=3: {}
          description: Created
        "204":
          content:
            application/json; version=3: {}
          description: No Content
        "207":
          content:
            application/json; version=3: {}
          description: Multi Status
        "400":
          content:
            application/json; version=3: {}
          description: Bad Request
        "401":
          content:
            application/json; version=3: {}
          description: Unauthorized
        "403":
          content:
            application/json; version=3: {}
          description: Forbidden
        "404":
          content:
            application/json; version=3: {}
          description: Not Found
        "405":
          content:
            application/json; version=3: {}
          description: Method Not Allowed
        "406":
          content:
            application/json; version=3: {}
          description: Not Acceptable
        "409":
          content:
            application/json; version=3: {}
          description: Conflict
        "429":
          content:
            application/json; version=3: {}
          description: Too Many Requests
        "500":
          content:
            application/json; version=3: {}
          description: Internal Server Error
      security:
      - JWT: []
      summary: /purge/cachekey
      tags:
      - Real-Time Purge
  /purge/wildcard:
    post:
      description: |-
        The Wildcard expression that represents the list of objects that you want to remove from the Azion Edge Servers cache.

        urls (array):the Wildcard URL or Wildcard Cache Key that represents the list of objects you want to expire. You can only use one Wildcard expression per request.

        method (choice): purge method, use the “delete” value for removal.
      operationId: purgeWildcard
      parameters:
      - example: application/json; version=3
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          type: string
        style: simple
      - example: Token [TOKEN VALUE]
        explode: false
        in: header
        name: Authorization
        required: false
        schema:
          type: string
        style: simple
      - example: application/json
        explode: false
        in: header
        name: Content-Type
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurgeWildcardRequest'
      responses:
        "200":
          content:
            application/json: {}
          description: Successful response
        "201":
          content:
            application/json; version=3: {}
          description: Created
        "204":
          content:
            application/json; version=3: {}
          description: No Content
        "207":
          content:
            application/json; version=3: {}
          description: Multi Status
        "400":
          content:
            application/json; version=3: {}
          description: Bad Request
        "401":
          content:
            application/json; version=3: {}
          description: Unauthorized
        "403":
          content:
            application/json; version=3: {}
          description: Forbidden
        "404":
          content:
            application/json; version=3: {}
          description: Not Found
        "405":
          content:
            application/json; version=3: {}
          description: Method Not Allowed
        "406":
          content:
            application/json; version=3: {}
          description: Not Acceptable
        "409":
          content:
            application/json; version=3: {}
          description: Conflict
        "429":
          content:
            application/json; version=3: {}
          description: Too Many Requests
        "500":
          content:
            application/json; version=3: {}
          description: Internal Server Error
      security:
      - JWT: []
      summary: /purge/wildcard
      tags:
      - Real-Time Purge
components:
  schemas:
    PurgeUrlRequest:
      additionalProperties: false
      example:
        urls:
        - http://www.domain.com/
        - http://www.domain.com/test.js
        - http://static.mistaken-domain.com/image1.jpg
        method: delete
      properties:
        urls:
          items:
            type: string
          type: array
        method:
          type: string
      required:
      - method
      - urls
      type: object
    PurgeCacheKeyRequest:
      additionalProperties: false
      example:
        urls:
        - http://www.domain.com/@@cookie_name=cookie_value
        - http://www.domain.com/test.js
        - http://static.domain.com/image1.jpg?ims=arguments@@variants
        method: delete
        layer: l2_caching
      properties:
        urls:
          items:
            type: string
          type: array
        method:
          type: string
        layer:
          type: string
      required:
      - layer
      - method
      - urls
      type: object
    PurgeWildcardRequest:
      additionalProperties: false
      example:
        urls:
        - http://www.domain.com/path/image.jpg*
        method: delete
      properties:
        urls:
          items:
            type: string
          type: array
        method:
          type: string
      required:
      - method
      - urls
      type: object
  securitySchemes:
    JWT:
      description: |
        You must inform a token to auth.
        Usage format: `Token <TOKEN>`
      in: header
      name: Authorization
      type: apiKey
