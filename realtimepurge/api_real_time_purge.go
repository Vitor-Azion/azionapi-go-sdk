/*
Purge API

Azion Real-Time Purge

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package realtimepurge

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// RealTimePurgeApiService RealTimePurgeApi service
type RealTimePurgeApiService service

type ApiPurgeCacheKeyRequest struct {
	ctx _context.Context
	ApiService *RealTimePurgeApiService
	accept *string
	authorization *string
	contentType *string
	purgeCacheKeyRequest *PurgeCacheKeyRequest
}

func (r ApiPurgeCacheKeyRequest) Accept(accept string) ApiPurgeCacheKeyRequest {
	r.accept = &accept
	return r
}
func (r ApiPurgeCacheKeyRequest) Authorization(authorization string) ApiPurgeCacheKeyRequest {
	r.authorization = &authorization
	return r
}
func (r ApiPurgeCacheKeyRequest) ContentType(contentType string) ApiPurgeCacheKeyRequest {
	r.contentType = &contentType
	return r
}
func (r ApiPurgeCacheKeyRequest) PurgeCacheKeyRequest(purgeCacheKeyRequest PurgeCacheKeyRequest) ApiPurgeCacheKeyRequest {
	r.purgeCacheKeyRequest = &purgeCacheKeyRequest
	return r
}

func (r ApiPurgeCacheKeyRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PurgeCacheKeyExecute(r)
}

/*
PurgeCacheKey /purge/cachekey

List of Cache Keys you want to remove from the Azion Edge Servers cache.

urls (array): list of up to 50 Cache Keys to be expired from the cache, per request.

method (choice): purge method, use the “delete” value for removal.

Layer (choice): layer where the purge will be done. Use the value “edge_caching” (default value if not informed) to purge on the Edge Caching layer and the value “l2_caching” to purge on L2 Caching.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPurgeCacheKeyRequest
*/
func (a *RealTimePurgeApiService) PurgeCacheKey(ctx _context.Context) ApiPurgeCacheKeyRequest {
	return ApiPurgeCacheKeyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *RealTimePurgeApiService) PurgeCacheKeyExecute(r ApiPurgeCacheKeyRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimePurgeApiService.PurgeCacheKey")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/purge/cachekey"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; version=3"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accept != nil {
		localVarHeaderParams["Accept"] = parameterToString(*r.accept, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	if r.contentType != nil {
		localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	}
	// body params
	localVarPostBody = r.purgeCacheKeyRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["JWT"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPurgeUrlRequest struct {
	ctx _context.Context
	ApiService *RealTimePurgeApiService
	accept *string
	authorization *string
	contentType *string
	purgeUrlRequest *PurgeUrlRequest
}

func (r ApiPurgeUrlRequest) Accept(accept string) ApiPurgeUrlRequest {
	r.accept = &accept
	return r
}
func (r ApiPurgeUrlRequest) Authorization(authorization string) ApiPurgeUrlRequest {
	r.authorization = &authorization
	return r
}
func (r ApiPurgeUrlRequest) ContentType(contentType string) ApiPurgeUrlRequest {
	r.contentType = &contentType
	return r
}
func (r ApiPurgeUrlRequest) PurgeUrlRequest(purgeUrlRequest PurgeUrlRequest) ApiPurgeUrlRequest {
	r.purgeUrlRequest = &purgeUrlRequest
	return r
}

func (r ApiPurgeUrlRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PurgeUrlExecute(r)
}

/*
PurgeUrl /purge/url

List of URLs you want to remove from the Azion Edge Servers cache.

urls (array): list of up to 50 URLs to be expired from the cache, per request.

method (choice): purge method, use the “delete” value for removal.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPurgeUrlRequest
*/
func (a *RealTimePurgeApiService) PurgeUrl(ctx _context.Context) ApiPurgeUrlRequest {
	return ApiPurgeUrlRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *RealTimePurgeApiService) PurgeUrlExecute(r ApiPurgeUrlRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimePurgeApiService.PurgeUrl")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/purge/url"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json; version=3"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; version=3"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accept != nil {
		localVarHeaderParams["Accept"] = parameterToString(*r.accept, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	if r.contentType != nil {
		localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	}
	// body params
	localVarPostBody = r.purgeUrlRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["JWT"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPurgeWildcardRequest struct {
	ctx _context.Context
	ApiService *RealTimePurgeApiService
	accept *string
	authorization *string
	contentType *string
	purgeWildcardRequest *PurgeWildcardRequest
}

func (r ApiPurgeWildcardRequest) Accept(accept string) ApiPurgeWildcardRequest {
	r.accept = &accept
	return r
}
func (r ApiPurgeWildcardRequest) Authorization(authorization string) ApiPurgeWildcardRequest {
	r.authorization = &authorization
	return r
}
func (r ApiPurgeWildcardRequest) ContentType(contentType string) ApiPurgeWildcardRequest {
	r.contentType = &contentType
	return r
}
func (r ApiPurgeWildcardRequest) PurgeWildcardRequest(purgeWildcardRequest PurgeWildcardRequest) ApiPurgeWildcardRequest {
	r.purgeWildcardRequest = &purgeWildcardRequest
	return r
}

func (r ApiPurgeWildcardRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PurgeWildcardExecute(r)
}

/*
PurgeWildcard /purge/wildcard

The Wildcard expression that represents the list of objects that you want to remove from the Azion Edge Servers cache.

urls (array):the Wildcard URL or Wildcard Cache Key that represents the list of objects you want to expire. You can only use one Wildcard expression per request.

method (choice): purge method, use the “delete” value for removal.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPurgeWildcardRequest
*/
func (a *RealTimePurgeApiService) PurgeWildcard(ctx _context.Context) ApiPurgeWildcardRequest {
	return ApiPurgeWildcardRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *RealTimePurgeApiService) PurgeWildcardExecute(r ApiPurgeWildcardRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimePurgeApiService.PurgeWildcard")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/purge/wildcard"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; version=3"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accept != nil {
		localVarHeaderParams["Accept"] = parameterToString(*r.accept, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	if r.contentType != nil {
		localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	}
	// body params
	localVarPostBody = r.purgeWildcardRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["JWT"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
