/*
Edge Application Statics API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storageapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"os"
)


// EdgeApplicationsApiService EdgeApplicationsApi service
type EdgeApplicationsApiService service

type ApiCreateVersionRequest struct {
	ctx context.Context
	ApiService *EdgeApplicationsApiService
	edgeApplicationId string
	body *interface{}
}

func (r ApiCreateVersionRequest) Body(body interface{}) ApiCreateVersionRequest {
	r.body = &body
	return r
}

func (r ApiCreateVersionRequest) Execute() (*CreateVersion201Response, *http.Response, error) {
	return r.ApiService.CreateVersionExecute(r)
}

/*
CreateVersion Method for CreateVersion



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param edgeApplicationId 
 @return ApiCreateVersionRequest
*/
func (a *EdgeApplicationsApiService) CreateVersion(ctx context.Context, edgeApplicationId string) ApiCreateVersionRequest {
	return ApiCreateVersionRequest{
		ApiService: a,
		ctx: ctx,
		edgeApplicationId: edgeApplicationId,
	}
}

// Execute executes the request
//  @return CreateVersion201Response
func (a *EdgeApplicationsApiService) CreateVersionExecute(r ApiCreateVersionRequest) (*CreateVersion201Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateVersion201Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EdgeApplicationsApiService.CreateVersion")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/edge-applications/{edge_application_id}/statics"
	localVarPath = strings.Replace(localVarPath, "{"+"edge_application_id"+"}", url.PathEscape(parameterValueToString(r.edgeApplicationId, "edgeApplicationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["authToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEdgeApplicationsEdgeApplicationIdStaticsVersionIdFilesPostRequest struct {
	ctx context.Context
	ApiService *EdgeApplicationsApiService
	contentDisposition *string
	edgeApplicationId string
	versionId string
	xAzionStaticPath *string
	body *os.File
}

// Required in order to get the file name. Example: Content-Disposition: attachment; filename&#x3D;index.js
func (r ApiEdgeApplicationsEdgeApplicationIdStaticsVersionIdFilesPostRequest) ContentDisposition(contentDisposition string) ApiEdgeApplicationsEdgeApplicationIdStaticsVersionIdFilesPostRequest {
	r.contentDisposition = &contentDisposition
	return r
}

// Original path file being uploaded. Given an original file path like &#39;assets/css/main.css&#39; the value would be: assets/css
func (r ApiEdgeApplicationsEdgeApplicationIdStaticsVersionIdFilesPostRequest) XAzionStaticPath(xAzionStaticPath string) ApiEdgeApplicationsEdgeApplicationIdStaticsVersionIdFilesPostRequest {
	r.xAzionStaticPath = &xAzionStaticPath
	return r
}

func (r ApiEdgeApplicationsEdgeApplicationIdStaticsVersionIdFilesPostRequest) Body(body *os.File) ApiEdgeApplicationsEdgeApplicationIdStaticsVersionIdFilesPostRequest {
	r.body = body
	return r
}

func (r ApiEdgeApplicationsEdgeApplicationIdStaticsVersionIdFilesPostRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.EdgeApplicationsEdgeApplicationIdStaticsVersionIdFilesPostExecute(r)
}

/*
EdgeApplicationsEdgeApplicationIdStaticsVersionIdFilesPost Method for EdgeApplicationsEdgeApplicationIdStaticsVersionIdFilesPost

Upload file and transfer to cloud storage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param edgeApplicationId Edge Application id (global_id)
 @param versionId 
 @return ApiEdgeApplicationsEdgeApplicationIdStaticsVersionIdFilesPostRequest
*/
func (a *EdgeApplicationsApiService) EdgeApplicationsEdgeApplicationIdStaticsVersionIdFilesPost(ctx context.Context, edgeApplicationId string, versionId string) ApiEdgeApplicationsEdgeApplicationIdStaticsVersionIdFilesPostRequest {
	return ApiEdgeApplicationsEdgeApplicationIdStaticsVersionIdFilesPostRequest{
		ApiService: a,
		ctx: ctx,
		edgeApplicationId: edgeApplicationId,
		versionId: versionId,
	}
}

// Execute executes the request
//  @return interface{}
func (a *EdgeApplicationsApiService) EdgeApplicationsEdgeApplicationIdStaticsVersionIdFilesPostExecute(r ApiEdgeApplicationsEdgeApplicationIdStaticsVersionIdFilesPostRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EdgeApplicationsApiService.EdgeApplicationsEdgeApplicationIdStaticsVersionIdFilesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/edge-applications/{edge_application_id}/statics/{version_id}/files"
	localVarPath = strings.Replace(localVarPath, "{"+"edge_application_id"+"}", url.PathEscape(parameterValueToString(r.edgeApplicationId, "edgeApplicationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version_id"+"}", url.PathEscape(parameterValueToString(r.versionId, "versionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.contentDisposition == nil {
		return localVarReturnValue, nil, reportError("contentDisposition is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToQuery(localVarQueryParams, "Content-Disposition", r.contentDisposition, "")
	if r.xAzionStaticPath != nil {
		parameterAddToQuery(localVarQueryParams, "X-Azion-Static-Path", r.xAzionStaticPath, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["authToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
